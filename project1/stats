#!/bin/sh

AVERAGES=()
MEDIANS=()
FILE_LIST=$$"FILE_LIST"
INPUT_FILE="test_file"

touch $FILE_LIST

separate_rows ()
{
    i=0
    while read line
    do
        i=`expr $i + 1`

        file=$$"row"$i
        touch $file
        echo $file >> $FILE_LIST

        printf "%s\n" $line > $file
    done < $INPUT_FILE
}

separate_columns ()
{
    # lines=(wc -l < $INPUT_FILE)
    # words=(wc -w $INPUT_FILE)
    first_col=$(cut -c1 $INPUT_FILE)
    l=${#first_col}

    for i in $(seq 1 2 $l)
    do
        file=$$"col"$i
        touch $file
        echo $file >> $FILE_LIST
        cat $INPUT_FILE | cut -c$i $1 > $file
    done
}

sort_files()
{
    while read line
    do
        sort $line -n -o $line
    done < $$"FILE_LIST"
}

print_results_rows()
{
    echo Average
    for i in "${AVERAGES[@]}"
    do
        echo $i
    done
}

print_results_cols()
{
    echo Averages:
    printf "%s\t" "${AVERAGES[@]}" > $$"results"
    echo "" >> $$"results"
    cat $$"results"
}

# get command line args

# separate into files by row or col !!NEEDS ERROR HANDLING!!
separate_rows
# separate_columns

# sort files !!NEEDS ERROR HANDLING!!
sort_files

# calculate average for each file !!NEEDS ERROR HANDLING!!
# !!ENSURE PROPER ROUNDING!!
while read line
do
    sum=0
    counter=0
    while read -r num
    do
        (( sum += num ))
        (( counter += 1 ))
    done < $line
    average=(`expr $sum / $counter`)
    AVERAGES+=( $average )
done < $FILE_LIST 
# print_results_rows
# print_results_cols

# calculate median for each file !!NEEDS ERROR HANDLING!! !!MAKE SURE TO DO
# PROPER ROUNDING!!
medians=()

# clean up files
# rm -f *rows*
# rm -f *col*
# rm -f $$"FILE_LIST"

# HANDLE ERRORS
# PIPE ERROR OUTPUT CORRECTLY
# CORRECT EXIT STATEMENTS

exit 0
