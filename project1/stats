#!/bin/sh

AVERAGES=()
MEDIANS=()
FILE_LIST=$$"FILE_LIST"
INPUT_FILE=$$"infile"
COL_FILE_BASE=$$"col"
ROW_FILE_BASE=$$"row"


separate_rows ()
{
    ROW=0
    while read line
    do
        ROW=$(( $ROW + 1 ))

        FILE=$ROW_FILE_BASE$ROW
        touch $FILE
        echo $FILE >> $FILE_LIST

        printf "%s\n" $line > $FILE
    done < $INPUT_FILE
}

separate_columns ()
{
    ROWS=$(wc -l < $INPUT_FILE)
    WORDS=$(wc -w < $INPUT_FILE)
    COLS=$(( $WORDS / $ROWS ))

    for COL in $(seq 1 $COLS)
    do
        FILE=$COL_FILE_BASE$COL
        touch $FILE
        echo $FILE >> $FILE_LIST
        while read LINE
        do
            echo $LINE | cut -d" " -f $COL >> $FILE
        done < $INPUT_FILE
    done
}

sort_files()
{
    while read line
    do
        sort $line -n -o $line
    done < $FILE_LIST
}

calculate_averages()
{
    while read line
    do
        SUM=0
        COUNT=0
        while read -r num
        do
            (( SUM += num ))
            (( COUNT += 1 ))
        done < $line
        AVERAGE=$( echo $SUM / $COUNT + 0.5 | bc -l )
        AVERAGES+=(${AVERAGE%.*})
    done < $FILE_LIST
}

calculate_medians()
{
    while read line
    do
        NUMS=$(wc -l < $line)
        MEDIAN_INDEX=$(( ($NUMS / 2) + 1 ))
        MEDIANS+=($( head -$MEDIAN_INDEX $line | tail -1 ))
    done < $FILE_LIST
}

print_results_rows()
{
    printf "Average\tMedian\n"
    LENGTH=${#AVERAGES[@]}
    for i in "${!AVERAGES[@]}"
    do
        printf '%s\t%s\n' ${AVERAGES[$i]} ${MEDIANS[$i]}
    done
}

print_results_cols()
{
    echo Averages:
    printf "%s\t" "${AVERAGES[@]}"
    printf "\n"
    echo Medians:
    printf "%s\t" "${MEDIANS[@]}"
    printf "\n"
}

clean_up()
{
    rm -f *row*
    rm -f *col*
    rm -f $$"FILE_LIST"
    rm -f *infile
}

common_operations()
{
    sort_files
    calculate_averages
    calculate_medians
}

# get command line args
if [ "$#" = "1" ]
then
    cat > $INPUT_FILE
elif [ "$#" = "2" ]
then
    INPUT_FILE=$2
fi

if [ ! -r $INPUT_FILE ]
then
    echo "stats: cannot read ${INPUT_FILE}"
    exit 1
fi

if [[ $1 == -r* ]];
then
    # separate files into rows **NEEDS ERROR HANDLING**
    separate_rows

    common_operations # ** NEEDS ERROR HANDLING **

    print_results_rows # ** NEEDS ERROR HANDLING **
elif [[ $1 == -c* ]];
then
    # separate files into cols ** NEEDS ERROR HANDLING**
    separate_columns

    common_operations # ** NEEDS ERROR HANDLING **

    print_results_cols # ** NEEDS ERROR HANDLING **
else
    echo "Usage: stats {-rows|-cols} [file]"
    exit 1
fi

# clean up files
clean_up

# HANDLE ERRORS
# NEED COMMENTS
# PIPE ERROR OUTPUT CORRECTLY
# CORRECT EXIT STATEMENTS

exit 0
