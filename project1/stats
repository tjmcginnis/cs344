#!/bin/sh

INPUT_FILE="stats_input$$"
TMP_FILE="stats_tmp$$"

function rows () {
    printf "Average\tMedian\n"
    while read line
    do
        # write row, newline separated, to temporary file
        printf "%s\n" $line > $TMP_FILE

        # sort temporary file
        sort $TMP_FILE -n -o $TMP_FILE

        # print average and median for row
        printf '%s\t%s\n' $(calculate_average) $(calculate_median)
    done < $INPUT_FILE
}

function columns () {
    local AVERAGES=()  # array for storing each column's average
    local MEDIANS=()   # array for storing each column's medians

    local ROWS=$(wc -l < $INPUT_FILE)   # number of rows in file
    local WORDS=$(wc -w < $INPUT_FILE)  # number of numbers in file

    # if file is empty, avoid division by zero error
    if [ $ROWS -eq "0" ]
    then
        ROWS=1
    fi

    local COLS=$(( $WORDS / $ROWS ))  # calculate number of columns in file

    for COL in $(seq 1 $COLS)
    do
        $(> $TMP_FILE)  # empty $TMP_FILE
        while read LINE
        do
            # write column COL to temporary file
            echo $LINE | cut -d" " -f $COL >> $TMP_FILE
        done < $INPUT_FILE

        # sort temporary file from least to greatest
        sort $TMP_FILE -n -o $TMP_FILE

        # calculate average for column and add to AVERAGES array
        AVERAGES+=($(calculate_average))

        # calculate median for column and add to MEDIAN array
        MEDIANS+=($(calculate_median))
    done

    # print results to standard output
    echo Averages:
    if [ ${#AVERAGES[@]} -ne 0 ]
    then
        printf "%s\t" "${AVERAGES[@]}"
    fi
    printf "\n"
    echo Medians:
    if [ ${#MEDIANS[@]} -ne 0 ]
    then
        printf "%s\t" "${MEDIANS[@]}"
    fi
    printf "\n"
}

function calculate_average() {
    local SUM=0
    local COUNT=0
    local AVERAGE=0

    while read -r num
    do
        (( SUM += num ))
        (( COUNT += 1 ))
    done < $TMP_FILE

    # add 0.5 to AVERAGE in order to round properly
    AVERAGE=$( echo $SUM / $COUNT + 0.5 | bc -l )

    # rounded AVERAGE
    echo ${AVERAGE%.*}
}

function calculate_median() {
    # find number of lines in $TMP_FILE
    local NUMS=$(wc -l < $TMP_FILE)

    # calculate line of $TMP_FILE with median number
    local MEDIAN_INDEX=$(( ($NUMS / 2) +1 ))

    # get median line of $TMPFILE
    echo $( head -$MEDIAN_INDEX $TMP_FILE | tail -1 )
}

function clean_up() {
    # remove temp files
    rm -f $TMP_FILE
    rm -rf "stats_input$$"
}

function usage() {
    >&2 echo "Usage: stats {-rows|-cols} [file]"
    clean_up
    exit 1
}

trap clean_up EXIT  # run clean_up no matter what

if [ "$#" = "1" ]
then
    # read from standard input
    cat > $INPUT_FILE
elif [ "$#" = "2" ]
then
    INPUT_FILE=$2
else
    # bad arguments
    usage
fi

if [ ! -r $INPUT_FILE ]
then
    >&2 echo "${0}: Cannot read ${INPUT_FILE}"
    clean_up
    exit 1
fi

if [[ $1 == -r* ]];
then
    # calculate stats for rows
    rows
elif [[ $1 == -c* ]];
then
    # calculate stats for columns
    columns
else
    # bad arguments
    usage
fi

# clean up files
clean_up

# HANDLE ERRORS
# NEED COMMENTS
# PIPE ERROR OUTPUT CORRECTLY
# CORRECT EXIT STATEMENTS

exit 0
